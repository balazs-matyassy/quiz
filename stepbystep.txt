----------
1. MILESTONE
ADATBÁZIS + LISTÁZÁS
----------

Kérdés: Kvíz alkalmazás fejlesztése

0. Program specifikálása
Hogyan nézzen ki a kvíz?

1. Modell definiálása
-> Question osztály létrehozása
1.1 Mezők definiálása
1.2 Getterek / setterek
1.3 Konstruktorok (szükség esetén)

2. Service definiálása
"szimulált adatbázis" / "megosztott map" / "közösen használt map"
counter az automatikusan kiosztott ID-k miatt kell

@Service egy speciális @Component

minimum 2 keresést érdemes létrehozni (getAll, getById)
keresés = "lekérdezés"
Lehetnének további keresések is. Pl. getByQuestion...

minimum 1 létrehozásért és frissítésért felelős metódus létrehozása (saveQuestion)
ha id == null -> kioszt egy új ID-t (INSERT), ebben az esetben a put új bejegyzést hoz létre
ha id != null, akkor a put a régi bejegyzést írja felül (UPDATE)

2.1 Mintaadatok (szükség esetén)

3. View (Thymeleaf sablon)

Egyszerű HTML sablon definiálása.
Statikus (nem függ a modell állapotától, pl. fejléc / <th>)
+ dinamikus részek (függnek a modell állapotától, pl. adat / <td>).

Áttekintő nézetben a data-th-each attribútum segítségével annyi sort generálunk,
amennyi kérdés van.

Ebben az esetben itt nevezzük el a listát, amit később a kontrollerben átadunk.
(questions)

4. Controller
4.1 Sercice DI (field, constructor)
4.2 metódus létrehozása (összes kérdés listázása)
- @GetMapping segítségével URL definiálása (route)
- összes kérdés lekérdezése az "adatbázisból" (SingleChoiceService)
List<SingleChoiceQuestion> questions = singleChoiceService.getAll();
- összes kérdés (List) hozzáadása a modellhez
model.addAttribute("questions", questions);
- view kiválasztása
(a view a beállított modell alapján kapja meg a paramétereket / változókat)
return "singlechoices";

----------
Feladat:
Free choice questionnel létrehozni a:
- model
- service
- view
- controllert

Pl. Ki volt Magyarország első királya?
-> I. (Szent) István

----------
2. MILESTONE
ÚJ KÉRDÉS HOZZÁADÁSA
----------
1. új view létrehozása
newsinglechoice.html

data-th-action="@{/singlechoices/create}"
Melyik endpoint fogja kezelni a kitöltött és visszaküldött űrlapot?

data-th-object="${question}"
Melyik modellben tárolt objektumot jelenítsük meg?
(model.addAttribute("question", new SingleChoiceQuestion()))

POST requestként érdemes visszaküldeni
method="post"

2. Kontroller kibővítése
@GetMapping("/singlechoices/create")
    public String createQuestion(Model model) {}

"új aloldal létrehozása"
csak az űrlap megjelenítéséért felel